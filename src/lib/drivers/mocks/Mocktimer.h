/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKTIMER_H
#define _MOCKTIMER_H

#include "unity.h"
#include "timer.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mocktimer_Init(void);
void Mocktimer_Destroy(void);
void Mocktimer_Verify(void);




#define timer_start_Expect(self, timer_instance, freq) timer_start_CMockExpect(__LINE__, self, timer_instance, freq)
void timer_start_CMockExpect(UNITY_LINE_TYPE cmock_line, Timer self, void* timer_instance, uint32_t freq);
#define timer_stop_Expect(self, timer_instance) timer_stop_CMockExpect(__LINE__, self, timer_instance)
void timer_stop_CMockExpect(UNITY_LINE_TYPE cmock_line, Timer self, void* timer_instance);
#define timer_get_tick_ExpectAndReturn(self, timer_instance, cmock_retval) timer_get_tick_CMockExpectAndReturn(__LINE__, self, timer_instance, cmock_retval)
void timer_get_tick_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Timer self, void* timer_instance, uint32_t cmock_to_return);
#define timer_start_microsecond_timer_Expect(self, timer_instance) timer_start_microsecond_timer_CMockExpect(__LINE__, self, timer_instance)
void timer_start_microsecond_timer_CMockExpect(UNITY_LINE_TYPE cmock_line, Timer self, void* timer_instance);
#define timer_stop_microsecond_timer_Expect(self, timer_instance) timer_stop_microsecond_timer_CMockExpect(__LINE__, self, timer_instance)
void timer_stop_microsecond_timer_CMockExpect(UNITY_LINE_TYPE cmock_line, Timer self, void* timer_instance);
#define timer_delay_micros_Expect(self, microseconds) timer_delay_micros_CMockExpect(__LINE__, self, microseconds)
void timer_delay_micros_CMockExpect(UNITY_LINE_TYPE cmock_line, Timer self, uint32_t microseconds);
#define timer_delay_Expect(self, milliseconds) timer_delay_CMockExpect(__LINE__, self, milliseconds)
void timer_delay_CMockExpect(UNITY_LINE_TYPE cmock_line, Timer self, uint32_t milliseconds);
#define timer_micros_ExpectAndReturn(self, cmock_retval) timer_micros_CMockExpectAndReturn(__LINE__, self, cmock_retval)
void timer_micros_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Timer self, uint32_t cmock_to_return);
#define timer_millis_ExpectAndReturn(self, cmock_retval) timer_millis_CMockExpectAndReturn(__LINE__, self, cmock_retval)
void timer_millis_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, Timer self, uint32_t cmock_to_return);
#define timer_start_pwm_Expect(self, pwm_instance, freq, duty_cycle) timer_start_pwm_CMockExpect(__LINE__, self, pwm_instance, freq, duty_cycle)
void timer_start_pwm_CMockExpect(UNITY_LINE_TYPE cmock_line, Timer self, void* pwm_instance, uint32_t freq, uint16_t duty_cycle);
#define timer_stop_pwm_Expect(self, pwm_instance) timer_stop_pwm_CMockExpect(__LINE__, self, pwm_instance)
void timer_stop_pwm_CMockExpect(UNITY_LINE_TYPE cmock_line, Timer self, void* pwm_instance);
#define timer_set_pwm_freq_Expect(self, pwm_instance, freq) timer_set_pwm_freq_CMockExpect(__LINE__, self, pwm_instance, freq)
void timer_set_pwm_freq_CMockExpect(UNITY_LINE_TYPE cmock_line, Timer self, void* pwm_instance, uint32_t freq);
#define timer_set_pwm_duty_cycle_Expect(self, pwm_instance, duty_cycle) timer_set_pwm_duty_cycle_CMockExpect(__LINE__, self, pwm_instance, duty_cycle)
void timer_set_pwm_duty_cycle_CMockExpect(UNITY_LINE_TYPE cmock_line, Timer self, void* pwm_instance, uint16_t duty_cycle);
#define timer_set_pwm_callback_Expect(self, cb, data) timer_set_pwm_callback_CMockExpect(__LINE__, self, cb, data)
void timer_set_pwm_callback_CMockExpect(UNITY_LINE_TYPE cmock_line, Timer self, PeriodicCallback cb, void* data);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
